/* tslint:disable */
/* eslint-disable */
/**
 * SeWork API
 * SeWork API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ResponseResultGetCompanyDangerFactorResponse } from '../models';
// @ts-ignore
import { ResponseResultGetCompanyProcessTitleResponse } from '../models';
// @ts-ignore
import { ResponseResultGetDangerFactorTitleResponse } from '../models';
// @ts-ignore
import { ResponseResultRecommendDangerFactorResponse } from '../models';
// @ts-ignore
import { ResponseResultUpsertCompanyDangerFactorResponse } from '../models';
// @ts-ignore
import { UpsertCompanyDangerFactorRequest } from '../models';
/**
 * Class2Api - axios parameter creator
 * @export
 */
export const Class2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 안전 위험 평가 1 단계 (위험 요인) 조회
         * @summary 안전 위험 평가 2 단계 (위험 요인) 조회
         * @param {number} assessmentId assessmentId
         * @param {number} [companyProcessId] companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyDangerFactorUsingGET: async (assessmentId: number, companyProcessId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('getCompanyDangerFactorUsingGET', 'assessmentId', assessmentId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/danger-factor`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (companyProcessId !== undefined) {
                localVarQueryParameter['companyProcessId'] = companyProcessId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 1 단계 공정 목록 조회
         * @summary 1단계 공정 목록 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyProcessTitleUsingGET: async (assessmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('getCompanyProcessTitleUsingGET', 'assessmentId', assessmentId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/process/title`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 2 단계 (위험 요인) 위험 요인 조회
         * @summary 안전 위험 평가 2 단계 (위험 요인) 위험 요인 조회
         * @param {GetDangerFactorTitleUsingGETCategoryEnum} category category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDangerFactorTitleUsingGET: async (category: GetDangerFactorTitleUsingGETCategoryEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('getDangerFactorTitleUsingGET', 'category', category)
            const localVarPath = `/api/assessment/v1/company/danger-factor/title`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 2 단계 (위험 요인) 추천 조회
         * @summary 안전 위험 평가 2 단계 (위험 요인) 추천 조회
         * @param {number} assessmentId assessmentId
         * @param {number} [companyProcessId] companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendDangerFactorUsingGET: async (assessmentId: number, companyProcessId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('getRecommendDangerFactorUsingGET', 'assessmentId', assessmentId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/danger-factor/recommend`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (companyProcessId !== undefined) {
                localVarQueryParameter['companyProcessId'] = companyProcessId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 1 단계 (위험 요인) 수정, 입력, 삭제
         * @summary 안전 위험 평가 2 단계 (위험 요인) 수정, 입력, 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {UpsertCompanyDangerFactorRequest} [upsertCompanyDangerFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertCompanyDangerFactorUsingPUT: async (assessmentId: number, companyProcessId: number, upsertCompanyDangerFactorRequest?: UpsertCompanyDangerFactorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('upsertCompanyDangerFactorUsingPUT', 'assessmentId', assessmentId)
            // verify required parameter 'companyProcessId' is not null or undefined
            assertParamExists('upsertCompanyDangerFactorUsingPUT', 'companyProcessId', companyProcessId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/danger-factor`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (companyProcessId !== undefined) {
                localVarQueryParameter['companyProcessId'] = companyProcessId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertCompanyDangerFactorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class2Api - functional programming interface
 * @export
 */
export const Class2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class2ApiAxiosParamCreator(configuration)
    return {
        /**
         * 안전 위험 평가 1 단계 (위험 요인) 조회
         * @summary 안전 위험 평가 2 단계 (위험 요인) 조회
         * @param {number} assessmentId assessmentId
         * @param {number} [companyProcessId] companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyDangerFactorUsingGET(assessmentId: number, companyProcessId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetCompanyDangerFactorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyDangerFactorUsingGET(assessmentId, companyProcessId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class2Api.getCompanyDangerFactorUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 1 단계 공정 목록 조회
         * @summary 1단계 공정 목록 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyProcessTitleUsingGET(assessmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetCompanyProcessTitleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyProcessTitleUsingGET(assessmentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class2Api.getCompanyProcessTitleUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 2 단계 (위험 요인) 위험 요인 조회
         * @summary 안전 위험 평가 2 단계 (위험 요인) 위험 요인 조회
         * @param {GetDangerFactorTitleUsingGETCategoryEnum} category category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDangerFactorTitleUsingGET(category: GetDangerFactorTitleUsingGETCategoryEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetDangerFactorTitleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDangerFactorTitleUsingGET(category, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class2Api.getDangerFactorTitleUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 2 단계 (위험 요인) 추천 조회
         * @summary 안전 위험 평가 2 단계 (위험 요인) 추천 조회
         * @param {number} assessmentId assessmentId
         * @param {number} [companyProcessId] companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecommendDangerFactorUsingGET(assessmentId: number, companyProcessId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultRecommendDangerFactorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecommendDangerFactorUsingGET(assessmentId, companyProcessId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class2Api.getRecommendDangerFactorUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 1 단계 (위험 요인) 수정, 입력, 삭제
         * @summary 안전 위험 평가 2 단계 (위험 요인) 수정, 입력, 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {UpsertCompanyDangerFactorRequest} [upsertCompanyDangerFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertCompanyDangerFactorUsingPUT(assessmentId: number, companyProcessId: number, upsertCompanyDangerFactorRequest?: UpsertCompanyDangerFactorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultUpsertCompanyDangerFactorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertCompanyDangerFactorUsingPUT(assessmentId, companyProcessId, upsertCompanyDangerFactorRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class2Api.upsertCompanyDangerFactorUsingPUT']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class2Api - factory interface
 * @export
 */
export const Class2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class2ApiFp(configuration)
    return {
        /**
         * 안전 위험 평가 1 단계 (위험 요인) 조회
         * @summary 안전 위험 평가 2 단계 (위험 요인) 조회
         * @param {number} assessmentId assessmentId
         * @param {number} [companyProcessId] companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyDangerFactorUsingGET(assessmentId: number, companyProcessId?: number, options?: any): AxiosPromise<ResponseResultGetCompanyDangerFactorResponse> {
            return localVarFp.getCompanyDangerFactorUsingGET(assessmentId, companyProcessId, options).then((request) => request(axios, basePath));
        },
        /**
         * 1 단계 공정 목록 조회
         * @summary 1단계 공정 목록 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyProcessTitleUsingGET(assessmentId: number, options?: any): AxiosPromise<ResponseResultGetCompanyProcessTitleResponse> {
            return localVarFp.getCompanyProcessTitleUsingGET(assessmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 2 단계 (위험 요인) 위험 요인 조회
         * @summary 안전 위험 평가 2 단계 (위험 요인) 위험 요인 조회
         * @param {GetDangerFactorTitleUsingGETCategoryEnum} category category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDangerFactorTitleUsingGET(category: GetDangerFactorTitleUsingGETCategoryEnum, options?: any): AxiosPromise<ResponseResultGetDangerFactorTitleResponse> {
            return localVarFp.getDangerFactorTitleUsingGET(category, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 2 단계 (위험 요인) 추천 조회
         * @summary 안전 위험 평가 2 단계 (위험 요인) 추천 조회
         * @param {number} assessmentId assessmentId
         * @param {number} [companyProcessId] companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendDangerFactorUsingGET(assessmentId: number, companyProcessId?: number, options?: any): AxiosPromise<ResponseResultRecommendDangerFactorResponse> {
            return localVarFp.getRecommendDangerFactorUsingGET(assessmentId, companyProcessId, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 1 단계 (위험 요인) 수정, 입력, 삭제
         * @summary 안전 위험 평가 2 단계 (위험 요인) 수정, 입력, 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {UpsertCompanyDangerFactorRequest} [upsertCompanyDangerFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertCompanyDangerFactorUsingPUT(assessmentId: number, companyProcessId: number, upsertCompanyDangerFactorRequest?: UpsertCompanyDangerFactorRequest, options?: any): AxiosPromise<ResponseResultUpsertCompanyDangerFactorResponse> {
            return localVarFp.upsertCompanyDangerFactorUsingPUT(assessmentId, companyProcessId, upsertCompanyDangerFactorRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class2Api - object-oriented interface
 * @export
 * @class Class2Api
 * @extends {BaseAPI}
 */
export class Class2Api extends BaseAPI {
    /**
     * 안전 위험 평가 1 단계 (위험 요인) 조회
     * @summary 안전 위험 평가 2 단계 (위험 요인) 조회
     * @param {number} assessmentId assessmentId
     * @param {number} [companyProcessId] companyProcessId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2Api
     */
    public getCompanyDangerFactorUsingGET(assessmentId: number, companyProcessId?: number, options?: AxiosRequestConfig) {
        return Class2ApiFp(this.configuration).getCompanyDangerFactorUsingGET(assessmentId, companyProcessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 1 단계 공정 목록 조회
     * @summary 1단계 공정 목록 조회
     * @param {number} assessmentId assessmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2Api
     */
    public getCompanyProcessTitleUsingGET(assessmentId: number, options?: AxiosRequestConfig) {
        return Class2ApiFp(this.configuration).getCompanyProcessTitleUsingGET(assessmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 2 단계 (위험 요인) 위험 요인 조회
     * @summary 안전 위험 평가 2 단계 (위험 요인) 위험 요인 조회
     * @param {GetDangerFactorTitleUsingGETCategoryEnum} category category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2Api
     */
    public getDangerFactorTitleUsingGET(category: GetDangerFactorTitleUsingGETCategoryEnum, options?: AxiosRequestConfig) {
        return Class2ApiFp(this.configuration).getDangerFactorTitleUsingGET(category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 2 단계 (위험 요인) 추천 조회
     * @summary 안전 위험 평가 2 단계 (위험 요인) 추천 조회
     * @param {number} assessmentId assessmentId
     * @param {number} [companyProcessId] companyProcessId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2Api
     */
    public getRecommendDangerFactorUsingGET(assessmentId: number, companyProcessId?: number, options?: AxiosRequestConfig) {
        return Class2ApiFp(this.configuration).getRecommendDangerFactorUsingGET(assessmentId, companyProcessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 1 단계 (위험 요인) 수정, 입력, 삭제
     * @summary 안전 위험 평가 2 단계 (위험 요인) 수정, 입력, 삭제
     * @param {number} assessmentId assessmentId
     * @param {number} companyProcessId companyProcessId
     * @param {UpsertCompanyDangerFactorRequest} [upsertCompanyDangerFactorRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2Api
     */
    public upsertCompanyDangerFactorUsingPUT(assessmentId: number, companyProcessId: number, upsertCompanyDangerFactorRequest?: UpsertCompanyDangerFactorRequest, options?: AxiosRequestConfig) {
        return Class2ApiFp(this.configuration).upsertCompanyDangerFactorUsingPUT(assessmentId, companyProcessId, upsertCompanyDangerFactorRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum GetDangerFactorTitleUsingGETCategoryEnum {
    Biological = 'BIOLOGICAL',
    Character = 'CHARACTER',
    Chemical = 'CHEMICAL',
    Electrical = 'ELECTRICAL',
    Environmental = 'ENVIRONMENTAL',
    Machinery = 'MACHINERY'
}
