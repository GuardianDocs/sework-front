/* tslint:disable */
/* eslint-disable */
/**
 * SeWork API
 * SeWork API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AssessmentStartResponse } from '../models';
// @ts-ignore
import { GetCompanyAdditionalInfoAnswerResponse } from '../models';
// @ts-ignore
import { LoginCompanyAccountRequest } from '../models';
// @ts-ignore
import { LoginCompanyAccountResponse } from '../models';
// @ts-ignore
import { RegisterCompanyAccountRequest } from '../models';
// @ts-ignore
import { RegisterCompanyAccountResponse } from '../models';
// @ts-ignore
import { RegisterCompanyAssessmentBasicInfoRequest } from '../models';
// @ts-ignore
import { ResponseResult } from '../models';
// @ts-ignore
import { ResponseResultAssessmentStartResponse } from '../models';
// @ts-ignore
import { ResponseResultGetCompanyAdditionalInfoAnswerResponse } from '../models';
// @ts-ignore
import { ResponseResultLoginCompanyAccountResponse } from '../models';
// @ts-ignore
import { ResponseResultRegisterCompanyAccountResponse } from '../models';
// @ts-ignore
import { ResponseResultSearchSectorResponse } from '../models';
// @ts-ignore
import { ResponseResultTokenRefreshResponse } from '../models';
// @ts-ignore
import { SearchSectorResponse } from '../models';
// @ts-ignore
import { TokenRefreshResponse } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 기업 추가 정보 설문지 답변 목록 조회
         * @summary 기업 추가 정보 설문지 답변 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalInfoAnswerUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assessment/v1/company/additional-info/answer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 기업회원이 로그인을 합니다.
         * @summary 기업회원 로그인
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {LoginCompanyAccountRequest} [loginCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginCompanyUsingPOST: async (xSEWORKPID: string, loginCompanyAccountRequest?: LoginCompanyAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSEWORKPID' is not null or undefined
            assertParamExists('loginCompanyUsingPOST', 'xSEWORKPID', xSEWORKPID)
            const localVarPath = `/api/account/v1/company/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (xSEWORKPID != null) {
                localVarHeaderParameter['X-SEWORK-PID'] = String(xSEWORKPID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginCompanyAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 토큰을 갱신 합니다.
         * @summary 토큰 갱신
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCompanyTokenUsingPOST: async (xSEWORKPID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSEWORKPID' is not null or undefined
            assertParamExists('refreshCompanyTokenUsingPOST', 'xSEWORKPID', xSEWORKPID)
            const localVarPath = `/api/account/v1/company/refresh/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (xSEWORKPID != null) {
                localVarHeaderParameter['X-SEWORK-PID'] = String(xSEWORKPID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 기업회원이 회원 가입 합니다.
         * @summary 기업회원 회원 가입
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {RegisterCompanyAccountRequest} [registerCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCompanyUsingPOST: async (xSEWORKPID: string, registerCompanyAccountRequest?: RegisterCompanyAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSEWORKPID' is not null or undefined
            assertParamExists('registerCompanyUsingPOST', 'xSEWORKPID', xSEWORKPID)
            const localVarPath = `/api/account/v1/company/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (xSEWORKPID != null) {
                localVarHeaderParameter['X-SEWORK-PID'] = String(xSEWORKPID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerCompanyAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 사전 정보 입력
         * @summary 안전 위험 평가 사전 정보 입력
         * @param {number} assessmentId assessmentId
         * @param {RegisterCompanyAssessmentBasicInfoRequest} [registerCompanyAssessmentBasicInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAssessmentBasicInfoUsingPOST: async (assessmentId: number, registerCompanyAssessmentBasicInfoRequest?: RegisterCompanyAssessmentBasicInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('saveAssessmentBasicInfoUsingPOST', 'assessmentId', assessmentId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerCompanyAssessmentBasicInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 업종 목록을 조회합니다
         * @summary 업종 목록 조회
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {string} [title] title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSectorUsingGET: async (page?: number, size?: number, title?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assessment/v1/company/sector`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 시작 하기
         * @summary 안전 위험 평가 시작
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAssessmentUsingPOST: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assessment/v1/company/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 기업 추가 정보 설문지 답변 목록 조회
         * @summary 기업 추가 정보 설문지 답변 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdditionalInfoAnswerUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCompanyAdditionalInfoAnswerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalInfoAnswerUsingGET(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAdditionalInfoAnswerUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 기업회원이 로그인을 합니다.
         * @summary 기업회원 로그인
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {LoginCompanyAccountRequest} [loginCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginCompanyUsingPOST(xSEWORKPID: string, loginCompanyAccountRequest?: LoginCompanyAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginCompanyAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginCompanyUsingPOST(xSEWORKPID, loginCompanyAccountRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.loginCompanyUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 토큰을 갱신 합니다.
         * @summary 토큰 갱신
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshCompanyTokenUsingPOST(xSEWORKPID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshCompanyTokenUsingPOST(xSEWORKPID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.refreshCompanyTokenUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 기업회원이 회원 가입 합니다.
         * @summary 기업회원 회원 가입
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {RegisterCompanyAccountRequest} [registerCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerCompanyUsingPOST(xSEWORKPID: string, registerCompanyAccountRequest?: RegisterCompanyAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterCompanyAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerCompanyUsingPOST(xSEWORKPID, registerCompanyAccountRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.registerCompanyUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 사전 정보 입력
         * @summary 안전 위험 평가 사전 정보 입력
         * @param {number} assessmentId assessmentId
         * @param {RegisterCompanyAssessmentBasicInfoRequest} [registerCompanyAssessmentBasicInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAssessmentBasicInfoUsingPOST(assessmentId: number, registerCompanyAssessmentBasicInfoRequest?: RegisterCompanyAssessmentBasicInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAssessmentBasicInfoUsingPOST(assessmentId, registerCompanyAssessmentBasicInfoRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.saveAssessmentBasicInfoUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 업종 목록을 조회합니다
         * @summary 업종 목록 조회
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {string} [title] title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSectorUsingGET(page?: number, size?: number, title?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchSectorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSectorUsingGET(page, size, title, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.searchSectorUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 시작 하기
         * @summary 안전 위험 평가 시작
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAssessmentUsingPOST(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssessmentStartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startAssessmentUsingPOST(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.startAssessmentUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 기업 추가 정보 설문지 답변 목록 조회
         * @summary 기업 추가 정보 설문지 답변 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalInfoAnswerUsingGET(options?: any): AxiosPromise<GetCompanyAdditionalInfoAnswerResponse> {
            return localVarFp.getAdditionalInfoAnswerUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 기업회원이 로그인을 합니다.
         * @summary 기업회원 로그인
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {LoginCompanyAccountRequest} [loginCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginCompanyUsingPOST(xSEWORKPID: string, loginCompanyAccountRequest?: LoginCompanyAccountRequest, options?: any): AxiosPromise<LoginCompanyAccountResponse> {
            return localVarFp.loginCompanyUsingPOST(xSEWORKPID, loginCompanyAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 토큰을 갱신 합니다.
         * @summary 토큰 갱신
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCompanyTokenUsingPOST(xSEWORKPID: string, options?: any): AxiosPromise<TokenRefreshResponse> {
            return localVarFp.refreshCompanyTokenUsingPOST(xSEWORKPID, options).then((request) => request(axios, basePath));
        },
        /**
         * 기업회원이 회원 가입 합니다.
         * @summary 기업회원 회원 가입
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {RegisterCompanyAccountRequest} [registerCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCompanyUsingPOST(xSEWORKPID: string, registerCompanyAccountRequest?: RegisterCompanyAccountRequest, options?: any): AxiosPromise<RegisterCompanyAccountResponse> {
            return localVarFp.registerCompanyUsingPOST(xSEWORKPID, registerCompanyAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 사전 정보 입력
         * @summary 안전 위험 평가 사전 정보 입력
         * @param {number} assessmentId assessmentId
         * @param {RegisterCompanyAssessmentBasicInfoRequest} [registerCompanyAssessmentBasicInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAssessmentBasicInfoUsingPOST(assessmentId: number, registerCompanyAssessmentBasicInfoRequest?: RegisterCompanyAssessmentBasicInfoRequest, options?: any): AxiosPromise<ResponseResult> {
            return localVarFp.saveAssessmentBasicInfoUsingPOST(assessmentId, registerCompanyAssessmentBasicInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 업종 목록을 조회합니다
         * @summary 업종 목록 조회
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {string} [title] title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSectorUsingGET(page?: number, size?: number, title?: string, options?: any): AxiosPromise<SearchSectorResponse> {
            return localVarFp.searchSectorUsingGET(page, size, title, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 시작 하기
         * @summary 안전 위험 평가 시작
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAssessmentUsingPOST(options?: any): AxiosPromise<AssessmentStartResponse> {
            return localVarFp.startAssessmentUsingPOST(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 기업 추가 정보 설문지 답변 목록 조회
     * @summary 기업 추가 정보 설문지 답변 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdditionalInfoAnswerUsingGET(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdditionalInfoAnswerUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 기업회원이 로그인을 합니다.
     * @summary 기업회원 로그인
     * @param {string} xSEWORKPID X-SEWORK-PID
     * @param {LoginCompanyAccountRequest} [loginCompanyAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginCompanyUsingPOST(xSEWORKPID: string, loginCompanyAccountRequest?: LoginCompanyAccountRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginCompanyUsingPOST(xSEWORKPID, loginCompanyAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 토큰을 갱신 합니다.
     * @summary 토큰 갱신
     * @param {string} xSEWORKPID X-SEWORK-PID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshCompanyTokenUsingPOST(xSEWORKPID: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refreshCompanyTokenUsingPOST(xSEWORKPID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 기업회원이 회원 가입 합니다.
     * @summary 기업회원 회원 가입
     * @param {string} xSEWORKPID X-SEWORK-PID
     * @param {RegisterCompanyAccountRequest} [registerCompanyAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerCompanyUsingPOST(xSEWORKPID: string, registerCompanyAccountRequest?: RegisterCompanyAccountRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerCompanyUsingPOST(xSEWORKPID, registerCompanyAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 사전 정보 입력
     * @summary 안전 위험 평가 사전 정보 입력
     * @param {number} assessmentId assessmentId
     * @param {RegisterCompanyAssessmentBasicInfoRequest} [registerCompanyAssessmentBasicInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveAssessmentBasicInfoUsingPOST(assessmentId: number, registerCompanyAssessmentBasicInfoRequest?: RegisterCompanyAssessmentBasicInfoRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saveAssessmentBasicInfoUsingPOST(assessmentId, registerCompanyAssessmentBasicInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 업종 목록을 조회합니다
     * @summary 업종 목록 조회
     * @param {number} [page] page
     * @param {number} [size] size
     * @param {string} [title] title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchSectorUsingGET(page?: number, size?: number, title?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchSectorUsingGET(page, size, title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 시작 하기
     * @summary 안전 위험 평가 시작
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startAssessmentUsingPOST(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).startAssessmentUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }
}

