/* tslint:disable */
/* eslint-disable */
/**
 * SeWork API
 * SeWork API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AdditionalCompanyAccountInfoRequest } from '../models';
// @ts-ignore
import { LoginCompanyAccountRequest } from '../models';
// @ts-ignore
import { RegisterCompanyAccountRequest } from '../models';
// @ts-ignore
import { RegisterCompanyAssessmentAdditionalInfoRequest } from '../models';
// @ts-ignore
import { ResponseResult } from '../models';
// @ts-ignore
import { ResponseResultAssessmentStartResponse } from '../models';
// @ts-ignore
import { ResponseResultCompanyBusinessLookUpResponse } from '../models';
// @ts-ignore
import { ResponseResultGetCompanyAdditionalInfoAnswerResponse } from '../models';
// @ts-ignore
import { ResponseResultGetCompanyAssessmentAdditionalInfoResponse } from '../models';
// @ts-ignore
import { ResponseResultGetCompanyAssessmentProgressResponse } from '../models';
// @ts-ignore
import { ResponseResultGetCompanyAssessmentReportResponse } from '../models';
// @ts-ignore
import { ResponseResultGetCompanyDangerFactorPhotoResponse } from '../models';
// @ts-ignore
import { ResponseResultGetCompanyDangerSolutionPhotoResponse } from '../models';
// @ts-ignore
import { ResponseResultGetCompanyDocumentDetailInfoResponse } from '../models';
// @ts-ignore
import { ResponseResultGetCompanyProcessPhotoResponse } from '../models';
// @ts-ignore
import { ResponseResultGetMyHomeCompanyAssessmentListResponse } from '../models';
// @ts-ignore
import { ResponseResultLoginCompanyAccountResponse } from '../models';
// @ts-ignore
import { ResponseResultRegisterCompanyAccountResponse } from '../models';
// @ts-ignore
import { ResponseResultSearchSectorResponse } from '../models';
// @ts-ignore
import { ResponseResultTokenRefreshResponse } from '../models';
// @ts-ignore
import { ResponseResultUploadCompanyDangerFactorPhotoResponse } from '../models';
// @ts-ignore
import { ResponseResultUploadCompanyDangerSolutionPhotoResponse } from '../models';
// @ts-ignore
import { ResponseResultUploadCompanyProcessPhotoResponse } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 안전 위험 평가 삭제
         * @summary 안전 위험 평가 삭제
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyAssessmentUsingDELETE: async (assessmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('deleteCompanyAssessmentUsingDELETE', 'assessmentId', assessmentId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 유해위험요인 사진 삭제
         * @summary 유해위험요인 사진 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerFactorId companyDangerFactorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyDangerFactorPhotoUsingDELETE: async (assessmentId: number, companyDangerFactorId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('deleteCompanyDangerFactorPhotoUsingDELETE', 'assessmentId', assessmentId)
            // verify required parameter 'companyDangerFactorId' is not null or undefined
            assertParamExists('deleteCompanyDangerFactorPhotoUsingDELETE', 'companyDangerFactorId', companyDangerFactorId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/process/danger-factor/{companyDangerFactorId}/photo`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)))
                .replace(`{${"companyDangerFactorId"}}`, encodeURIComponent(String(companyDangerFactorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 감소대책 사진 삭제
         * @summary 감소대책 사진 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerSolutionId companyDangerSolutionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyDangerSolutionPhotoUsingDELETE: async (assessmentId: number, companyDangerSolutionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('deleteCompanyDangerSolutionPhotoUsingDELETE', 'assessmentId', assessmentId)
            // verify required parameter 'companyDangerSolutionId' is not null or undefined
            assertParamExists('deleteCompanyDangerSolutionPhotoUsingDELETE', 'companyDangerSolutionId', companyDangerSolutionId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/process/danger-solution/{companyDangerSolutionId}/photo`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)))
                .replace(`{${"companyDangerSolutionId"}}`, encodeURIComponent(String(companyDangerSolutionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 세부 작업 사진 삭제
         * @summary 세부작업 사진 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyProcessPhotoUsingDELETE: async (assessmentId: number, companyProcessId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('deleteCompanyProcessPhotoUsingDELETE', 'assessmentId', assessmentId)
            // verify required parameter 'companyProcessId' is not null or undefined
            assertParamExists('deleteCompanyProcessPhotoUsingDELETE', 'companyProcessId', companyProcessId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/process/{companyProcessId}/photo`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)))
                .replace(`{${"companyProcessId"}}`, encodeURIComponent(String(companyProcessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 기업 추가 정보 설문지 답변 목록 조회
         * @summary 기업 추가 정보 설문지 답변 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalInfoAnswerUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assessment/v1/company/additional-info/answer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 사전 정보 조회
         * @summary 안전 위험 평가 사전 정보 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyAssessmentAdditionalInfoUsingGET: async (assessmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('getCompanyAssessmentAdditionalInfoUsingGET', 'assessmentId', assessmentId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/info`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 진행 상태 조회 (상단 단계 바)
         * @summary 안전 위험 평가 진행 상태 조회 (상단 단계 바)
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyAssessmentProgressUsingGET: async (assessmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('getCompanyAssessmentProgressUsingGET', 'assessmentId', assessmentId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/progress`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 상세 조회
         * @summary 안전 위험 평가 상세 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyAssessmentReportUsingGET: async (assessmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('getCompanyAssessmentReportUsingGET', 'assessmentId', assessmentId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 유해위험요인 사진 조회
         * @summary 유해위험요인 사진 조회
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyDangerFactorPhotoUsingGET: async (assessmentId: number, companyProcessId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('getCompanyDangerFactorPhotoUsingGET', 'assessmentId', assessmentId)
            // verify required parameter 'companyProcessId' is not null or undefined
            assertParamExists('getCompanyDangerFactorPhotoUsingGET', 'companyProcessId', companyProcessId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/process/{companyProcessId}/danger-factor/photo`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)))
                .replace(`{${"companyProcessId"}}`, encodeURIComponent(String(companyProcessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 감소대책 사진 조회
         * @summary 감소대책 사진 조회
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyDangerSolutionPhotoUsingGET: async (assessmentId: number, companyProcessId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('getCompanyDangerSolutionPhotoUsingGET', 'assessmentId', assessmentId)
            // verify required parameter 'companyProcessId' is not null or undefined
            assertParamExists('getCompanyDangerSolutionPhotoUsingGET', 'companyProcessId', companyProcessId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/process/{companyProcessId}/danger-solution/photo`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)))
                .replace(`{${"companyProcessId"}}`, encodeURIComponent(String(companyProcessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 기업 사업자 정보를 조회 합니다.
         * @summary 기업 사업자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyInfoUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/v1/company/company-business-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 세부 작업 사진 조회
         * @summary 세부작업 사진 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyProcessPhotoUsingGET: async (assessmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('getCompanyProcessPhotoUsingGET', 'assessmentId', assessmentId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/process/photo`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험성평가 보고서 내용 조회
         * @summary 안전 위험성평가 보고서 내용 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentDetailInfoUsingGET: async (assessmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('getDocumentDetailInfoUsingGET', 'assessmentId', assessmentId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/doc/info`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 목록 조회
         * @summary 안전 위험 평가 목록 조회
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {GetMyHomeCompanyAssessmentListUsingGETAssessmentTypeEnum} [assessmentType] assessmentType
         * @param {boolean} [doneYn] doneYn
         * @param {string} [startDate] startDate
         * @param {string} [endDate] endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyHomeCompanyAssessmentListUsingGET: async (page?: number, size?: number, assessmentType?: GetMyHomeCompanyAssessmentListUsingGETAssessmentTypeEnum, doneYn?: boolean, startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assessment/v1/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (assessmentType !== undefined) {
                localVarQueryParameter['assessmentType'] = assessmentType;
            }

            if (doneYn !== undefined) {
                localVarQueryParameter['doneYn'] = doneYn;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 기업회원이 로그인을 합니다.
         * @summary 기업회원 로그인
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {LoginCompanyAccountRequest} [loginCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginCompanyUsingPOST: async (xSEWORKPID: string, loginCompanyAccountRequest?: LoginCompanyAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSEWORKPID' is not null or undefined
            assertParamExists('loginCompanyUsingPOST', 'xSEWORKPID', xSEWORKPID)
            const localVarPath = `/api/account/v1/company/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (xSEWORKPID != null) {
                localVarHeaderParameter['X-SEWORK-PID'] = String(xSEWORKPID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginCompanyAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 토큰을 갱신 합니다.
         * @summary 토큰 갱신
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCompanyTokenUsingPOST: async (xSEWORKPID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSEWORKPID' is not null or undefined
            assertParamExists('refreshCompanyTokenUsingPOST', 'xSEWORKPID', xSEWORKPID)
            const localVarPath = `/api/account/v1/company/refresh/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (xSEWORKPID != null) {
                localVarHeaderParameter['X-SEWORK-PID'] = String(xSEWORKPID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 기업회원이 회원 가입 합니다.
         * @summary 기업회원 회원 가입
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {RegisterCompanyAccountRequest} [registerCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCompanyUsingPOST: async (xSEWORKPID: string, registerCompanyAccountRequest?: RegisterCompanyAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSEWORKPID' is not null or undefined
            assertParamExists('registerCompanyUsingPOST', 'xSEWORKPID', xSEWORKPID)
            const localVarPath = `/api/account/v1/company/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (xSEWORKPID != null) {
                localVarHeaderParameter['X-SEWORK-PID'] = String(xSEWORKPID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerCompanyAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 계정의 추가 정보를 저장합니다.
         * @summary 계정 추가 정보
         * @param {AdditionalCompanyAccountInfoRequest} [additionalCompanyAccountInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAdditionalInfoUsingPOST: async (additionalCompanyAccountInfoRequest?: AdditionalCompanyAccountInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/v1/company/additional-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(additionalCompanyAccountInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 사전 정보 입력
         * @summary 안전 위험 평가 사전 정보 입력
         * @param {number} assessmentId assessmentId
         * @param {RegisterCompanyAssessmentAdditionalInfoRequest} [registerCompanyAssessmentAdditionalInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAssessmentBasicInfoUsingPOST: async (assessmentId: number, registerCompanyAssessmentAdditionalInfoRequest?: RegisterCompanyAssessmentAdditionalInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('saveAssessmentBasicInfoUsingPOST', 'assessmentId', assessmentId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/info`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerCompanyAssessmentAdditionalInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 업종 목록을 조회합니다
         * @summary 업종 목록 조회
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {string} [title] title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSectorUsingGET: async (page?: number, size?: number, title?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assessment/v1/company/sector`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 시작 하기
         * @summary 안전 위험 평가 시작
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAssessmentUsingPOST: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assessment/v1/company/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 안전 보고 체계 사진 업로드
         * @summary 안전 위험 평가 안전 보고 체계 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCompanyAssessmentRoleStructureUsingPOST: async (assessmentId: number, file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('uploadCompanyAssessmentRoleStructureUsingPOST', 'assessmentId', assessmentId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadCompanyAssessmentRoleStructureUsingPOST', 'file', file)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/role-structure`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 유해위험요인 사진 업로드
         * @summary 유해위험요인 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerFactorId companyDangerFactorId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCompanyDangerFactorPhotoUsingPOST: async (assessmentId: number, companyDangerFactorId: number, file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('uploadCompanyDangerFactorPhotoUsingPOST', 'assessmentId', assessmentId)
            // verify required parameter 'companyDangerFactorId' is not null or undefined
            assertParamExists('uploadCompanyDangerFactorPhotoUsingPOST', 'companyDangerFactorId', companyDangerFactorId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadCompanyDangerFactorPhotoUsingPOST', 'file', file)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/process/danger-factor/{companyDangerFactorId}/photo`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)))
                .replace(`{${"companyDangerFactorId"}}`, encodeURIComponent(String(companyDangerFactorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 감소대책 사진 업로드
         * @summary 감소대책 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerSolutionId companyDangerSolutionId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCompanyDangerSolutionPhotoUsingPOST: async (assessmentId: number, companyDangerSolutionId: number, file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('uploadCompanyDangerSolutionPhotoUsingPOST', 'assessmentId', assessmentId)
            // verify required parameter 'companyDangerSolutionId' is not null or undefined
            assertParamExists('uploadCompanyDangerSolutionPhotoUsingPOST', 'companyDangerSolutionId', companyDangerSolutionId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadCompanyDangerSolutionPhotoUsingPOST', 'file', file)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/process/danger-solution/{companyDangerSolutionId}/photo`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)))
                .replace(`{${"companyDangerSolutionId"}}`, encodeURIComponent(String(companyDangerSolutionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 세부 작업 사진 업로드
         * @summary 세부작업 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCompanyProcessPhotoUsingPOST: async (assessmentId: number, companyProcessId: number, file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('uploadCompanyProcessPhotoUsingPOST', 'assessmentId', assessmentId)
            // verify required parameter 'companyProcessId' is not null or undefined
            assertParamExists('uploadCompanyProcessPhotoUsingPOST', 'companyProcessId', companyProcessId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadCompanyProcessPhotoUsingPOST', 'file', file)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/process/{companyProcessId}/photo`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)))
                .replace(`{${"companyProcessId"}}`, encodeURIComponent(String(companyProcessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 안전 위험 평가 삭제
         * @summary 안전 위험 평가 삭제
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompanyAssessmentUsingDELETE(assessmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompanyAssessmentUsingDELETE(assessmentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteCompanyAssessmentUsingDELETE']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 유해위험요인 사진 삭제
         * @summary 유해위험요인 사진 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerFactorId companyDangerFactorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompanyDangerFactorPhotoUsingDELETE(assessmentId: number, companyDangerFactorId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompanyDangerFactorPhotoUsingDELETE(assessmentId, companyDangerFactorId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteCompanyDangerFactorPhotoUsingDELETE']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 감소대책 사진 삭제
         * @summary 감소대책 사진 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerSolutionId companyDangerSolutionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompanyDangerSolutionPhotoUsingDELETE(assessmentId: number, companyDangerSolutionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompanyDangerSolutionPhotoUsingDELETE(assessmentId, companyDangerSolutionId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteCompanyDangerSolutionPhotoUsingDELETE']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 세부 작업 사진 삭제
         * @summary 세부작업 사진 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompanyProcessPhotoUsingDELETE(assessmentId: number, companyProcessId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompanyProcessPhotoUsingDELETE(assessmentId, companyProcessId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteCompanyProcessPhotoUsingDELETE']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 기업 추가 정보 설문지 답변 목록 조회
         * @summary 기업 추가 정보 설문지 답변 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdditionalInfoAnswerUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetCompanyAdditionalInfoAnswerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalInfoAnswerUsingGET(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAdditionalInfoAnswerUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 사전 정보 조회
         * @summary 안전 위험 평가 사전 정보 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyAssessmentAdditionalInfoUsingGET(assessmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetCompanyAssessmentAdditionalInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyAssessmentAdditionalInfoUsingGET(assessmentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getCompanyAssessmentAdditionalInfoUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 진행 상태 조회 (상단 단계 바)
         * @summary 안전 위험 평가 진행 상태 조회 (상단 단계 바)
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyAssessmentProgressUsingGET(assessmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetCompanyAssessmentProgressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyAssessmentProgressUsingGET(assessmentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getCompanyAssessmentProgressUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 상세 조회
         * @summary 안전 위험 평가 상세 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyAssessmentReportUsingGET(assessmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetCompanyAssessmentReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyAssessmentReportUsingGET(assessmentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getCompanyAssessmentReportUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 유해위험요인 사진 조회
         * @summary 유해위험요인 사진 조회
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyDangerFactorPhotoUsingGET(assessmentId: number, companyProcessId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetCompanyDangerFactorPhotoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyDangerFactorPhotoUsingGET(assessmentId, companyProcessId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getCompanyDangerFactorPhotoUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 감소대책 사진 조회
         * @summary 감소대책 사진 조회
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyDangerSolutionPhotoUsingGET(assessmentId: number, companyProcessId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetCompanyDangerSolutionPhotoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyDangerSolutionPhotoUsingGET(assessmentId, companyProcessId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getCompanyDangerSolutionPhotoUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 기업 사업자 정보를 조회 합니다.
         * @summary 기업 사업자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyInfoUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultCompanyBusinessLookUpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyInfoUsingGET(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getCompanyInfoUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 세부 작업 사진 조회
         * @summary 세부작업 사진 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyProcessPhotoUsingGET(assessmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetCompanyProcessPhotoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyProcessPhotoUsingGET(assessmentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getCompanyProcessPhotoUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험성평가 보고서 내용 조회
         * @summary 안전 위험성평가 보고서 내용 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentDetailInfoUsingGET(assessmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetCompanyDocumentDetailInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentDetailInfoUsingGET(assessmentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getDocumentDetailInfoUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 목록 조회
         * @summary 안전 위험 평가 목록 조회
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {GetMyHomeCompanyAssessmentListUsingGETAssessmentTypeEnum} [assessmentType] assessmentType
         * @param {boolean} [doneYn] doneYn
         * @param {string} [startDate] startDate
         * @param {string} [endDate] endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyHomeCompanyAssessmentListUsingGET(page?: number, size?: number, assessmentType?: GetMyHomeCompanyAssessmentListUsingGETAssessmentTypeEnum, doneYn?: boolean, startDate?: string, endDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultGetMyHomeCompanyAssessmentListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyHomeCompanyAssessmentListUsingGET(page, size, assessmentType, doneYn, startDate, endDate, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getMyHomeCompanyAssessmentListUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 기업회원이 로그인을 합니다.
         * @summary 기업회원 로그인
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {LoginCompanyAccountRequest} [loginCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginCompanyUsingPOST(xSEWORKPID: string, loginCompanyAccountRequest?: LoginCompanyAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultLoginCompanyAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginCompanyUsingPOST(xSEWORKPID, loginCompanyAccountRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.loginCompanyUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 토큰을 갱신 합니다.
         * @summary 토큰 갱신
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshCompanyTokenUsingPOST(xSEWORKPID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultTokenRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshCompanyTokenUsingPOST(xSEWORKPID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.refreshCompanyTokenUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 기업회원이 회원 가입 합니다.
         * @summary 기업회원 회원 가입
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {RegisterCompanyAccountRequest} [registerCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerCompanyUsingPOST(xSEWORKPID: string, registerCompanyAccountRequest?: RegisterCompanyAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultRegisterCompanyAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerCompanyUsingPOST(xSEWORKPID, registerCompanyAccountRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.registerCompanyUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 계정의 추가 정보를 저장합니다.
         * @summary 계정 추가 정보
         * @param {AdditionalCompanyAccountInfoRequest} [additionalCompanyAccountInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAdditionalInfoUsingPOST(additionalCompanyAccountInfoRequest?: AdditionalCompanyAccountInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAdditionalInfoUsingPOST(additionalCompanyAccountInfoRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.saveAdditionalInfoUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 사전 정보 입력
         * @summary 안전 위험 평가 사전 정보 입력
         * @param {number} assessmentId assessmentId
         * @param {RegisterCompanyAssessmentAdditionalInfoRequest} [registerCompanyAssessmentAdditionalInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAssessmentBasicInfoUsingPOST(assessmentId: number, registerCompanyAssessmentAdditionalInfoRequest?: RegisterCompanyAssessmentAdditionalInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAssessmentBasicInfoUsingPOST(assessmentId, registerCompanyAssessmentAdditionalInfoRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.saveAssessmentBasicInfoUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 업종 목록을 조회합니다
         * @summary 업종 목록 조회
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {string} [title] title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSectorUsingGET(page?: number, size?: number, title?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultSearchSectorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSectorUsingGET(page, size, title, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.searchSectorUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 시작 하기
         * @summary 안전 위험 평가 시작
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAssessmentUsingPOST(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultAssessmentStartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startAssessmentUsingPOST(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.startAssessmentUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 안전 보고 체계 사진 업로드
         * @summary 안전 위험 평가 안전 보고 체계 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadCompanyAssessmentRoleStructureUsingPOST(assessmentId: number, file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCompanyAssessmentRoleStructureUsingPOST(assessmentId, file, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.uploadCompanyAssessmentRoleStructureUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 유해위험요인 사진 업로드
         * @summary 유해위험요인 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerFactorId companyDangerFactorId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadCompanyDangerFactorPhotoUsingPOST(assessmentId: number, companyDangerFactorId: number, file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultUploadCompanyDangerFactorPhotoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCompanyDangerFactorPhotoUsingPOST(assessmentId, companyDangerFactorId, file, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.uploadCompanyDangerFactorPhotoUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 감소대책 사진 업로드
         * @summary 감소대책 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerSolutionId companyDangerSolutionId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadCompanyDangerSolutionPhotoUsingPOST(assessmentId: number, companyDangerSolutionId: number, file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultUploadCompanyDangerSolutionPhotoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCompanyDangerSolutionPhotoUsingPOST(assessmentId, companyDangerSolutionId, file, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.uploadCompanyDangerSolutionPhotoUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 세부 작업 사진 업로드
         * @summary 세부작업 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadCompanyProcessPhotoUsingPOST(assessmentId: number, companyProcessId: number, file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResultUploadCompanyProcessPhotoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCompanyProcessPhotoUsingPOST(assessmentId, companyProcessId, file, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.uploadCompanyProcessPhotoUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 안전 위험 평가 삭제
         * @summary 안전 위험 평가 삭제
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyAssessmentUsingDELETE(assessmentId: number, options?: any): AxiosPromise<ResponseResult> {
            return localVarFp.deleteCompanyAssessmentUsingDELETE(assessmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 유해위험요인 사진 삭제
         * @summary 유해위험요인 사진 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerFactorId companyDangerFactorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyDangerFactorPhotoUsingDELETE(assessmentId: number, companyDangerFactorId: number, options?: any): AxiosPromise<ResponseResult> {
            return localVarFp.deleteCompanyDangerFactorPhotoUsingDELETE(assessmentId, companyDangerFactorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 감소대책 사진 삭제
         * @summary 감소대책 사진 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerSolutionId companyDangerSolutionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyDangerSolutionPhotoUsingDELETE(assessmentId: number, companyDangerSolutionId: number, options?: any): AxiosPromise<ResponseResult> {
            return localVarFp.deleteCompanyDangerSolutionPhotoUsingDELETE(assessmentId, companyDangerSolutionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 세부 작업 사진 삭제
         * @summary 세부작업 사진 삭제
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyProcessPhotoUsingDELETE(assessmentId: number, companyProcessId: number, options?: any): AxiosPromise<ResponseResult> {
            return localVarFp.deleteCompanyProcessPhotoUsingDELETE(assessmentId, companyProcessId, options).then((request) => request(axios, basePath));
        },
        /**
         * 기업 추가 정보 설문지 답변 목록 조회
         * @summary 기업 추가 정보 설문지 답변 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalInfoAnswerUsingGET(options?: any): AxiosPromise<ResponseResultGetCompanyAdditionalInfoAnswerResponse> {
            return localVarFp.getAdditionalInfoAnswerUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 사전 정보 조회
         * @summary 안전 위험 평가 사전 정보 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyAssessmentAdditionalInfoUsingGET(assessmentId: number, options?: any): AxiosPromise<ResponseResultGetCompanyAssessmentAdditionalInfoResponse> {
            return localVarFp.getCompanyAssessmentAdditionalInfoUsingGET(assessmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 진행 상태 조회 (상단 단계 바)
         * @summary 안전 위험 평가 진행 상태 조회 (상단 단계 바)
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyAssessmentProgressUsingGET(assessmentId: number, options?: any): AxiosPromise<ResponseResultGetCompanyAssessmentProgressResponse> {
            return localVarFp.getCompanyAssessmentProgressUsingGET(assessmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 상세 조회
         * @summary 안전 위험 평가 상세 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyAssessmentReportUsingGET(assessmentId: number, options?: any): AxiosPromise<ResponseResultGetCompanyAssessmentReportResponse> {
            return localVarFp.getCompanyAssessmentReportUsingGET(assessmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 유해위험요인 사진 조회
         * @summary 유해위험요인 사진 조회
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyDangerFactorPhotoUsingGET(assessmentId: number, companyProcessId: number, options?: any): AxiosPromise<ResponseResultGetCompanyDangerFactorPhotoResponse> {
            return localVarFp.getCompanyDangerFactorPhotoUsingGET(assessmentId, companyProcessId, options).then((request) => request(axios, basePath));
        },
        /**
         * 감소대책 사진 조회
         * @summary 감소대책 사진 조회
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyDangerSolutionPhotoUsingGET(assessmentId: number, companyProcessId: number, options?: any): AxiosPromise<ResponseResultGetCompanyDangerSolutionPhotoResponse> {
            return localVarFp.getCompanyDangerSolutionPhotoUsingGET(assessmentId, companyProcessId, options).then((request) => request(axios, basePath));
        },
        /**
         * 기업 사업자 정보를 조회 합니다.
         * @summary 기업 사업자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyInfoUsingGET(options?: any): AxiosPromise<ResponseResultCompanyBusinessLookUpResponse> {
            return localVarFp.getCompanyInfoUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 세부 작업 사진 조회
         * @summary 세부작업 사진 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyProcessPhotoUsingGET(assessmentId: number, options?: any): AxiosPromise<ResponseResultGetCompanyProcessPhotoResponse> {
            return localVarFp.getCompanyProcessPhotoUsingGET(assessmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험성평가 보고서 내용 조회
         * @summary 안전 위험성평가 보고서 내용 조회
         * @param {number} assessmentId assessmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentDetailInfoUsingGET(assessmentId: number, options?: any): AxiosPromise<ResponseResultGetCompanyDocumentDetailInfoResponse> {
            return localVarFp.getDocumentDetailInfoUsingGET(assessmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 목록 조회
         * @summary 안전 위험 평가 목록 조회
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {GetMyHomeCompanyAssessmentListUsingGETAssessmentTypeEnum} [assessmentType] assessmentType
         * @param {boolean} [doneYn] doneYn
         * @param {string} [startDate] startDate
         * @param {string} [endDate] endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyHomeCompanyAssessmentListUsingGET(page?: number, size?: number, assessmentType?: GetMyHomeCompanyAssessmentListUsingGETAssessmentTypeEnum, doneYn?: boolean, startDate?: string, endDate?: string, options?: any): AxiosPromise<ResponseResultGetMyHomeCompanyAssessmentListResponse> {
            return localVarFp.getMyHomeCompanyAssessmentListUsingGET(page, size, assessmentType, doneYn, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 기업회원이 로그인을 합니다.
         * @summary 기업회원 로그인
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {LoginCompanyAccountRequest} [loginCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginCompanyUsingPOST(xSEWORKPID: string, loginCompanyAccountRequest?: LoginCompanyAccountRequest, options?: any): AxiosPromise<ResponseResultLoginCompanyAccountResponse> {
            return localVarFp.loginCompanyUsingPOST(xSEWORKPID, loginCompanyAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 토큰을 갱신 합니다.
         * @summary 토큰 갱신
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCompanyTokenUsingPOST(xSEWORKPID: string, options?: any): AxiosPromise<ResponseResultTokenRefreshResponse> {
            return localVarFp.refreshCompanyTokenUsingPOST(xSEWORKPID, options).then((request) => request(axios, basePath));
        },
        /**
         * 기업회원이 회원 가입 합니다.
         * @summary 기업회원 회원 가입
         * @param {string} xSEWORKPID X-SEWORK-PID
         * @param {RegisterCompanyAccountRequest} [registerCompanyAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCompanyUsingPOST(xSEWORKPID: string, registerCompanyAccountRequest?: RegisterCompanyAccountRequest, options?: any): AxiosPromise<ResponseResultRegisterCompanyAccountResponse> {
            return localVarFp.registerCompanyUsingPOST(xSEWORKPID, registerCompanyAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 계정의 추가 정보를 저장합니다.
         * @summary 계정 추가 정보
         * @param {AdditionalCompanyAccountInfoRequest} [additionalCompanyAccountInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAdditionalInfoUsingPOST(additionalCompanyAccountInfoRequest?: AdditionalCompanyAccountInfoRequest, options?: any): AxiosPromise<ResponseResult> {
            return localVarFp.saveAdditionalInfoUsingPOST(additionalCompanyAccountInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 사전 정보 입력
         * @summary 안전 위험 평가 사전 정보 입력
         * @param {number} assessmentId assessmentId
         * @param {RegisterCompanyAssessmentAdditionalInfoRequest} [registerCompanyAssessmentAdditionalInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAssessmentBasicInfoUsingPOST(assessmentId: number, registerCompanyAssessmentAdditionalInfoRequest?: RegisterCompanyAssessmentAdditionalInfoRequest, options?: any): AxiosPromise<ResponseResult> {
            return localVarFp.saveAssessmentBasicInfoUsingPOST(assessmentId, registerCompanyAssessmentAdditionalInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 업종 목록을 조회합니다
         * @summary 업종 목록 조회
         * @param {number} [page] page
         * @param {number} [size] size
         * @param {string} [title] title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSectorUsingGET(page?: number, size?: number, title?: string, options?: any): AxiosPromise<ResponseResultSearchSectorResponse> {
            return localVarFp.searchSectorUsingGET(page, size, title, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 시작 하기
         * @summary 안전 위험 평가 시작
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAssessmentUsingPOST(options?: any): AxiosPromise<ResponseResultAssessmentStartResponse> {
            return localVarFp.startAssessmentUsingPOST(options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 안전 보고 체계 사진 업로드
         * @summary 안전 위험 평가 안전 보고 체계 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCompanyAssessmentRoleStructureUsingPOST(assessmentId: number, file: File, options?: any): AxiosPromise<ResponseResult> {
            return localVarFp.uploadCompanyAssessmentRoleStructureUsingPOST(assessmentId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 유해위험요인 사진 업로드
         * @summary 유해위험요인 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerFactorId companyDangerFactorId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCompanyDangerFactorPhotoUsingPOST(assessmentId: number, companyDangerFactorId: number, file: File, options?: any): AxiosPromise<ResponseResultUploadCompanyDangerFactorPhotoResponse> {
            return localVarFp.uploadCompanyDangerFactorPhotoUsingPOST(assessmentId, companyDangerFactorId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 감소대책 사진 업로드
         * @summary 감소대책 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {number} companyDangerSolutionId companyDangerSolutionId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCompanyDangerSolutionPhotoUsingPOST(assessmentId: number, companyDangerSolutionId: number, file: File, options?: any): AxiosPromise<ResponseResultUploadCompanyDangerSolutionPhotoResponse> {
            return localVarFp.uploadCompanyDangerSolutionPhotoUsingPOST(assessmentId, companyDangerSolutionId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 세부 작업 사진 업로드
         * @summary 세부작업 사진 업로드
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {File} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCompanyProcessPhotoUsingPOST(assessmentId: number, companyProcessId: number, file: File, options?: any): AxiosPromise<ResponseResultUploadCompanyProcessPhotoResponse> {
            return localVarFp.uploadCompanyProcessPhotoUsingPOST(assessmentId, companyProcessId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 안전 위험 평가 삭제
     * @summary 안전 위험 평가 삭제
     * @param {number} assessmentId assessmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCompanyAssessmentUsingDELETE(assessmentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCompanyAssessmentUsingDELETE(assessmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 유해위험요인 사진 삭제
     * @summary 유해위험요인 사진 삭제
     * @param {number} assessmentId assessmentId
     * @param {number} companyDangerFactorId companyDangerFactorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCompanyDangerFactorPhotoUsingDELETE(assessmentId: number, companyDangerFactorId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCompanyDangerFactorPhotoUsingDELETE(assessmentId, companyDangerFactorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 감소대책 사진 삭제
     * @summary 감소대책 사진 삭제
     * @param {number} assessmentId assessmentId
     * @param {number} companyDangerSolutionId companyDangerSolutionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCompanyDangerSolutionPhotoUsingDELETE(assessmentId: number, companyDangerSolutionId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCompanyDangerSolutionPhotoUsingDELETE(assessmentId, companyDangerSolutionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 세부 작업 사진 삭제
     * @summary 세부작업 사진 삭제
     * @param {number} assessmentId assessmentId
     * @param {number} companyProcessId companyProcessId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCompanyProcessPhotoUsingDELETE(assessmentId: number, companyProcessId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCompanyProcessPhotoUsingDELETE(assessmentId, companyProcessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 기업 추가 정보 설문지 답변 목록 조회
     * @summary 기업 추가 정보 설문지 답변 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdditionalInfoAnswerUsingGET(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdditionalInfoAnswerUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 사전 정보 조회
     * @summary 안전 위험 평가 사전 정보 조회
     * @param {number} assessmentId assessmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyAssessmentAdditionalInfoUsingGET(assessmentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompanyAssessmentAdditionalInfoUsingGET(assessmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 진행 상태 조회 (상단 단계 바)
     * @summary 안전 위험 평가 진행 상태 조회 (상단 단계 바)
     * @param {number} assessmentId assessmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyAssessmentProgressUsingGET(assessmentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompanyAssessmentProgressUsingGET(assessmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 상세 조회
     * @summary 안전 위험 평가 상세 조회
     * @param {number} assessmentId assessmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyAssessmentReportUsingGET(assessmentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompanyAssessmentReportUsingGET(assessmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 유해위험요인 사진 조회
     * @summary 유해위험요인 사진 조회
     * @param {number} assessmentId assessmentId
     * @param {number} companyProcessId companyProcessId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyDangerFactorPhotoUsingGET(assessmentId: number, companyProcessId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompanyDangerFactorPhotoUsingGET(assessmentId, companyProcessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 감소대책 사진 조회
     * @summary 감소대책 사진 조회
     * @param {number} assessmentId assessmentId
     * @param {number} companyProcessId companyProcessId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyDangerSolutionPhotoUsingGET(assessmentId: number, companyProcessId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompanyDangerSolutionPhotoUsingGET(assessmentId, companyProcessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 기업 사업자 정보를 조회 합니다.
     * @summary 기업 사업자 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyInfoUsingGET(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompanyInfoUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 세부 작업 사진 조회
     * @summary 세부작업 사진 조회
     * @param {number} assessmentId assessmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyProcessPhotoUsingGET(assessmentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompanyProcessPhotoUsingGET(assessmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험성평가 보고서 내용 조회
     * @summary 안전 위험성평가 보고서 내용 조회
     * @param {number} assessmentId assessmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDocumentDetailInfoUsingGET(assessmentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDocumentDetailInfoUsingGET(assessmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 목록 조회
     * @summary 안전 위험 평가 목록 조회
     * @param {number} [page] page
     * @param {number} [size] size
     * @param {GetMyHomeCompanyAssessmentListUsingGETAssessmentTypeEnum} [assessmentType] assessmentType
     * @param {boolean} [doneYn] doneYn
     * @param {string} [startDate] startDate
     * @param {string} [endDate] endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyHomeCompanyAssessmentListUsingGET(page?: number, size?: number, assessmentType?: GetMyHomeCompanyAssessmentListUsingGETAssessmentTypeEnum, doneYn?: boolean, startDate?: string, endDate?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyHomeCompanyAssessmentListUsingGET(page, size, assessmentType, doneYn, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 기업회원이 로그인을 합니다.
     * @summary 기업회원 로그인
     * @param {string} xSEWORKPID X-SEWORK-PID
     * @param {LoginCompanyAccountRequest} [loginCompanyAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginCompanyUsingPOST(xSEWORKPID: string, loginCompanyAccountRequest?: LoginCompanyAccountRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginCompanyUsingPOST(xSEWORKPID, loginCompanyAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 토큰을 갱신 합니다.
     * @summary 토큰 갱신
     * @param {string} xSEWORKPID X-SEWORK-PID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshCompanyTokenUsingPOST(xSEWORKPID: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refreshCompanyTokenUsingPOST(xSEWORKPID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 기업회원이 회원 가입 합니다.
     * @summary 기업회원 회원 가입
     * @param {string} xSEWORKPID X-SEWORK-PID
     * @param {RegisterCompanyAccountRequest} [registerCompanyAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerCompanyUsingPOST(xSEWORKPID: string, registerCompanyAccountRequest?: RegisterCompanyAccountRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerCompanyUsingPOST(xSEWORKPID, registerCompanyAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 계정의 추가 정보를 저장합니다.
     * @summary 계정 추가 정보
     * @param {AdditionalCompanyAccountInfoRequest} [additionalCompanyAccountInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveAdditionalInfoUsingPOST(additionalCompanyAccountInfoRequest?: AdditionalCompanyAccountInfoRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saveAdditionalInfoUsingPOST(additionalCompanyAccountInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 사전 정보 입력
     * @summary 안전 위험 평가 사전 정보 입력
     * @param {number} assessmentId assessmentId
     * @param {RegisterCompanyAssessmentAdditionalInfoRequest} [registerCompanyAssessmentAdditionalInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveAssessmentBasicInfoUsingPOST(assessmentId: number, registerCompanyAssessmentAdditionalInfoRequest?: RegisterCompanyAssessmentAdditionalInfoRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saveAssessmentBasicInfoUsingPOST(assessmentId, registerCompanyAssessmentAdditionalInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 업종 목록을 조회합니다
     * @summary 업종 목록 조회
     * @param {number} [page] page
     * @param {number} [size] size
     * @param {string} [title] title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchSectorUsingGET(page?: number, size?: number, title?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchSectorUsingGET(page, size, title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 시작 하기
     * @summary 안전 위험 평가 시작
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startAssessmentUsingPOST(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).startAssessmentUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 안전 보고 체계 사진 업로드
     * @summary 안전 위험 평가 안전 보고 체계 사진 업로드
     * @param {number} assessmentId assessmentId
     * @param {File} file file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadCompanyAssessmentRoleStructureUsingPOST(assessmentId: number, file: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadCompanyAssessmentRoleStructureUsingPOST(assessmentId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 유해위험요인 사진 업로드
     * @summary 유해위험요인 사진 업로드
     * @param {number} assessmentId assessmentId
     * @param {number} companyDangerFactorId companyDangerFactorId
     * @param {File} file file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadCompanyDangerFactorPhotoUsingPOST(assessmentId: number, companyDangerFactorId: number, file: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadCompanyDangerFactorPhotoUsingPOST(assessmentId, companyDangerFactorId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 감소대책 사진 업로드
     * @summary 감소대책 사진 업로드
     * @param {number} assessmentId assessmentId
     * @param {number} companyDangerSolutionId companyDangerSolutionId
     * @param {File} file file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadCompanyDangerSolutionPhotoUsingPOST(assessmentId: number, companyDangerSolutionId: number, file: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadCompanyDangerSolutionPhotoUsingPOST(assessmentId, companyDangerSolutionId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 세부 작업 사진 업로드
     * @summary 세부작업 사진 업로드
     * @param {number} assessmentId assessmentId
     * @param {number} companyProcessId companyProcessId
     * @param {File} file file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadCompanyProcessPhotoUsingPOST(assessmentId: number, companyProcessId: number, file: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadCompanyProcessPhotoUsingPOST(assessmentId, companyProcessId, file, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum GetMyHomeCompanyAssessmentListUsingGETAssessmentTypeEnum {
    Continuous = 'CONTINUOUS',
    Initial = 'INITIAL',
    Regular = 'REGULAR'
}
