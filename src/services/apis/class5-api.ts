/* tslint:disable */
/* eslint-disable */
/**
 * SeWork API
 * SeWork API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GetCompanyDangerSolutionExecutionResponse } from '../models';
// @ts-ignore
import { ResponseResult } from '../models';
// @ts-ignore
import { ResponseResultGetCompanyDangerSolutionExecutionResponse } from '../models';
// @ts-ignore
import { SaveCompanyDangerSolutionExecutionRequest } from '../models';
/**
 * Class5Api - axios parameter creator
 * @export
 */
export const Class5ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 안전 위험 평가 5 단계 (감소대첵 수립) 조회
         * @summary 안전 위험 평가 5 단계 (감소대첵 수립) 조회
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyDangerSolutionExecutionUsingGET: async (assessmentId: number, companyProcessId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('getCompanyDangerSolutionExecutionUsingGET', 'assessmentId', assessmentId)
            // verify required parameter 'companyProcessId' is not null or undefined
            assertParamExists('getCompanyDangerSolutionExecutionUsingGET', 'companyProcessId', companyProcessId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/danger-solution/execution`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (companyProcessId !== undefined) {
                localVarQueryParameter['companyProcessId'] = companyProcessId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 안전 위험 평가 5 단계 (감소대첵 수립) 저장
         * @summary 안전 위험 평가 5 단계 (감소대첵 수립) 저장
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {SaveCompanyDangerSolutionExecutionRequest} [saveCompanyDangerSolutionExecutionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCompanyDangerSolutionExecutionUsingPOST: async (assessmentId: number, companyProcessId: number, saveCompanyDangerSolutionExecutionRequest?: SaveCompanyDangerSolutionExecutionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('saveCompanyDangerSolutionExecutionUsingPOST', 'assessmentId', assessmentId)
            // verify required parameter 'companyProcessId' is not null or undefined
            assertParamExists('saveCompanyDangerSolutionExecutionUsingPOST', 'companyProcessId', companyProcessId)
            const localVarPath = `/api/assessment/v1/company/{assessmentId}/danger-solution/execution`
                .replace(`{${"assessmentId"}}`, encodeURIComponent(String(assessmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAUTH2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAUTH2", ["read", "write"], configuration)

            if (companyProcessId !== undefined) {
                localVarQueryParameter['companyProcessId'] = companyProcessId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveCompanyDangerSolutionExecutionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class5Api - functional programming interface
 * @export
 */
export const Class5ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class5ApiAxiosParamCreator(configuration)
    return {
        /**
         * 안전 위험 평가 5 단계 (감소대첵 수립) 조회
         * @summary 안전 위험 평가 5 단계 (감소대첵 수립) 조회
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyDangerSolutionExecutionUsingGET(assessmentId: number, companyProcessId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCompanyDangerSolutionExecutionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyDangerSolutionExecutionUsingGET(assessmentId, companyProcessId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class5Api.getCompanyDangerSolutionExecutionUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 안전 위험 평가 5 단계 (감소대첵 수립) 저장
         * @summary 안전 위험 평가 5 단계 (감소대첵 수립) 저장
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {SaveCompanyDangerSolutionExecutionRequest} [saveCompanyDangerSolutionExecutionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveCompanyDangerSolutionExecutionUsingPOST(assessmentId: number, companyProcessId: number, saveCompanyDangerSolutionExecutionRequest?: SaveCompanyDangerSolutionExecutionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveCompanyDangerSolutionExecutionUsingPOST(assessmentId, companyProcessId, saveCompanyDangerSolutionExecutionRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class5Api.saveCompanyDangerSolutionExecutionUsingPOST']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class5Api - factory interface
 * @export
 */
export const Class5ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class5ApiFp(configuration)
    return {
        /**
         * 안전 위험 평가 5 단계 (감소대첵 수립) 조회
         * @summary 안전 위험 평가 5 단계 (감소대첵 수립) 조회
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyDangerSolutionExecutionUsingGET(assessmentId: number, companyProcessId: number, options?: any): AxiosPromise<GetCompanyDangerSolutionExecutionResponse> {
            return localVarFp.getCompanyDangerSolutionExecutionUsingGET(assessmentId, companyProcessId, options).then((request) => request(axios, basePath));
        },
        /**
         * 안전 위험 평가 5 단계 (감소대첵 수립) 저장
         * @summary 안전 위험 평가 5 단계 (감소대첵 수립) 저장
         * @param {number} assessmentId assessmentId
         * @param {number} companyProcessId companyProcessId
         * @param {SaveCompanyDangerSolutionExecutionRequest} [saveCompanyDangerSolutionExecutionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCompanyDangerSolutionExecutionUsingPOST(assessmentId: number, companyProcessId: number, saveCompanyDangerSolutionExecutionRequest?: SaveCompanyDangerSolutionExecutionRequest, options?: any): AxiosPromise<ResponseResult> {
            return localVarFp.saveCompanyDangerSolutionExecutionUsingPOST(assessmentId, companyProcessId, saveCompanyDangerSolutionExecutionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class5Api - object-oriented interface
 * @export
 * @class Class5Api
 * @extends {BaseAPI}
 */
export class Class5Api extends BaseAPI {
    /**
     * 안전 위험 평가 5 단계 (감소대첵 수립) 조회
     * @summary 안전 위험 평가 5 단계 (감소대첵 수립) 조회
     * @param {number} assessmentId assessmentId
     * @param {number} companyProcessId companyProcessId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class5Api
     */
    public getCompanyDangerSolutionExecutionUsingGET(assessmentId: number, companyProcessId: number, options?: AxiosRequestConfig) {
        return Class5ApiFp(this.configuration).getCompanyDangerSolutionExecutionUsingGET(assessmentId, companyProcessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 안전 위험 평가 5 단계 (감소대첵 수립) 저장
     * @summary 안전 위험 평가 5 단계 (감소대첵 수립) 저장
     * @param {number} assessmentId assessmentId
     * @param {number} companyProcessId companyProcessId
     * @param {SaveCompanyDangerSolutionExecutionRequest} [saveCompanyDangerSolutionExecutionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class5Api
     */
    public saveCompanyDangerSolutionExecutionUsingPOST(assessmentId: number, companyProcessId: number, saveCompanyDangerSolutionExecutionRequest?: SaveCompanyDangerSolutionExecutionRequest, options?: AxiosRequestConfig) {
        return Class5ApiFp(this.configuration).saveCompanyDangerSolutionExecutionUsingPOST(assessmentId, companyProcessId, saveCompanyDangerSolutionExecutionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

